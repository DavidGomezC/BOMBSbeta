// Code generated by Stan version 2.20.0

#include <stan/model/model_header.hpp>

namespace PLacExample_Stan_test_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "E:/UNI/D_Drive/PhD/JULIAlang/Generalisation_PLacExample/Examples/tmp/PLacExample_Stan_test.stan");
    reader.add_event(240, 238, "end", "E:/UNI/D_Drive/PhD/JULIAlang/Generalisation_PLacExample/Examples/tmp/PLacExample_Stan_test.stan");
    return reader;
}

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type>
PLacExample_ODEs(const T0__& t,
                     const std::vector<T1__>& y,
                     const std::vector<T2__>& p,
                     const std::vector<T3__>& x_r,
                     const std::vector<int>& x_i, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 6;
        local_scalar_t__ IPTG(DUMMY_VAR__);
        (void) IPTG;  // dummy to suppress unused var warning
        stan::math::initialize(IPTG, DUMMY_VAR__);
        stan::math::fill(IPTG, DUMMY_VAR__);
        stan::math::assign(IPTG,get_base1(x_r, 1, "x_r", 1));

        current_statement_begin__ = 10;
        local_scalar_t__ alpha1(DUMMY_VAR__);
        (void) alpha1;  // dummy to suppress unused var warning
        stan::math::initialize(alpha1, DUMMY_VAR__);
        stan::math::fill(alpha1, DUMMY_VAR__);
        stan::math::assign(alpha1,get_base1(p, 1, "p", 1));

        current_statement_begin__ = 11;
        local_scalar_t__ Vm1(DUMMY_VAR__);
        (void) Vm1;  // dummy to suppress unused var warning
        stan::math::initialize(Vm1, DUMMY_VAR__);
        stan::math::fill(Vm1, DUMMY_VAR__);
        stan::math::assign(Vm1,get_base1(p, 2, "p", 1));

        current_statement_begin__ = 12;
        local_scalar_t__ h1(DUMMY_VAR__);
        (void) h1;  // dummy to suppress unused var warning
        stan::math::initialize(h1, DUMMY_VAR__);
        stan::math::fill(h1, DUMMY_VAR__);
        stan::math::assign(h1,get_base1(p, 3, "p", 1));

        current_statement_begin__ = 13;
        local_scalar_t__ Km1(DUMMY_VAR__);
        (void) Km1;  // dummy to suppress unused var warning
        stan::math::initialize(Km1, DUMMY_VAR__);
        stan::math::fill(Km1, DUMMY_VAR__);
        stan::math::assign(Km1,get_base1(p, 4, "p", 1));

        current_statement_begin__ = 14;
        local_scalar_t__ d1(DUMMY_VAR__);
        (void) d1;  // dummy to suppress unused var warning
        stan::math::initialize(d1, DUMMY_VAR__);
        stan::math::fill(d1, DUMMY_VAR__);
        stan::math::assign(d1,get_base1(p, 5, "p", 1));

        current_statement_begin__ = 15;
        local_scalar_t__ alpha2(DUMMY_VAR__);
        (void) alpha2;  // dummy to suppress unused var warning
        stan::math::initialize(alpha2, DUMMY_VAR__);
        stan::math::fill(alpha2, DUMMY_VAR__);
        stan::math::assign(alpha2,get_base1(p, 6, "p", 1));

        current_statement_begin__ = 16;
        local_scalar_t__ d2(DUMMY_VAR__);
        (void) d2;  // dummy to suppress unused var warning
        stan::math::initialize(d2, DUMMY_VAR__);
        stan::math::fill(d2, DUMMY_VAR__);
        stan::math::assign(d2,get_base1(p, 7, "p", 1));

        current_statement_begin__ = 17;
        local_scalar_t__ Kf(DUMMY_VAR__);
        (void) Kf;  // dummy to suppress unused var warning
        stan::math::initialize(Kf, DUMMY_VAR__);
        stan::math::fill(Kf, DUMMY_VAR__);
        stan::math::assign(Kf,get_base1(p, 8, "p", 1));

        current_statement_begin__ = 18;
        local_scalar_t__ sc_molec(DUMMY_VAR__);
        (void) sc_molec;  // dummy to suppress unused var warning
        stan::math::initialize(sc_molec, DUMMY_VAR__);
        stan::math::fill(sc_molec, DUMMY_VAR__);
        stan::math::assign(sc_molec,get_base1(p, 9, "p", 1));

        current_statement_begin__ = 22;
        validate_non_negative_index("dInd_dt", "4", 4);
        std::vector<local_scalar_t__  > dInd_dt(4, local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(dInd_dt, DUMMY_VAR__);
        stan::math::fill(dInd_dt, DUMMY_VAR__);

        current_statement_begin__ = 24;
        local_scalar_t__ Cit_mrna(DUMMY_VAR__);
        (void) Cit_mrna;  // dummy to suppress unused var warning
        stan::math::initialize(Cit_mrna, DUMMY_VAR__);
        stan::math::fill(Cit_mrna, DUMMY_VAR__);
        stan::math::assign(Cit_mrna,get_base1(y, 1, "y", 1));

        current_statement_begin__ = 25;
        local_scalar_t__ Cit_foldedP(DUMMY_VAR__);
        (void) Cit_foldedP;  // dummy to suppress unused var warning
        stan::math::initialize(Cit_foldedP, DUMMY_VAR__);
        stan::math::fill(Cit_foldedP, DUMMY_VAR__);
        stan::math::assign(Cit_foldedP,get_base1(y, 2, "y", 1));

        current_statement_begin__ = 26;
        local_scalar_t__ Cit_fluo(DUMMY_VAR__);
        (void) Cit_fluo;  // dummy to suppress unused var warning
        stan::math::initialize(Cit_fluo, DUMMY_VAR__);
        stan::math::fill(Cit_fluo, DUMMY_VAR__);
        stan::math::assign(Cit_fluo,get_base1(y, 3, "y", 1));

        current_statement_begin__ = 27;
        local_scalar_t__ Cit_AU(DUMMY_VAR__);
        (void) Cit_AU;  // dummy to suppress unused var warning
        stan::math::initialize(Cit_AU, DUMMY_VAR__);
        stan::math::fill(Cit_AU, DUMMY_VAR__);
        stan::math::assign(Cit_AU,get_base1(y, 4, "y", 1));


        current_statement_begin__ = 30;
        stan::model::assign(dInd_dt, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    ((alpha1 + (Vm1 * (pow(IPTG, h1) / (pow(Km1, h1) + pow(IPTG, h1))))) - (d1 * Cit_mrna)), 
                    "assigning variable dInd_dt");
        current_statement_begin__ = 31;
        stan::model::assign(dInd_dt, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                    ((alpha2 * Cit_mrna) - ((d2 + Kf) * Cit_foldedP)), 
                    "assigning variable dInd_dt");
        current_statement_begin__ = 32;
        stan::model::assign(dInd_dt, 
                    stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                    ((Kf * Cit_foldedP) - (d2 * Cit_fluo)), 
                    "assigning variable dInd_dt");
        current_statement_begin__ = 33;
        stan::model::assign(dInd_dt, 
                    stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list()), 
                    (sc_molec * get_base1(dInd_dt, 3, "dInd_dt", 1)), 
                    "assigning variable dInd_dt");
        current_statement_begin__ = 37;
        return stan::math::promote_scalar<fun_return_scalar_t__>(dInd_dt);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct PLacExample_ODEs_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type>
    operator()(const T0__& t,
                     const std::vector<T1__>& y,
                     const std::vector<T2__>& p,
                     const std::vector<T3__>& x_r,
                     const std::vector<int>& x_i, std::ostream* pstream__) const {
        return PLacExample_ODEs(t, y, p, x_r, x_i, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
SteadyState(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& init,
                const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& p,
                const std::vector<T2__>& x_r,
                const std::vector<int>& x_i, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 45;
        validate_non_negative_index("alp", "4", 4);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alp(4);
        stan::math::initialize(alp, DUMMY_VAR__);
        stan::math::fill(alp, DUMMY_VAR__);

        current_statement_begin__ = 48;
        local_scalar_t__ alpha1(DUMMY_VAR__);
        (void) alpha1;  // dummy to suppress unused var warning
        stan::math::initialize(alpha1, DUMMY_VAR__);
        stan::math::fill(alpha1, DUMMY_VAR__);
        stan::math::assign(alpha1,get_base1(p, 1, "p", 1));

        current_statement_begin__ = 49;
        local_scalar_t__ Vm1(DUMMY_VAR__);
        (void) Vm1;  // dummy to suppress unused var warning
        stan::math::initialize(Vm1, DUMMY_VAR__);
        stan::math::fill(Vm1, DUMMY_VAR__);
        stan::math::assign(Vm1,get_base1(p, 2, "p", 1));

        current_statement_begin__ = 50;
        local_scalar_t__ h1(DUMMY_VAR__);
        (void) h1;  // dummy to suppress unused var warning
        stan::math::initialize(h1, DUMMY_VAR__);
        stan::math::fill(h1, DUMMY_VAR__);
        stan::math::assign(h1,get_base1(p, 3, "p", 1));

        current_statement_begin__ = 51;
        local_scalar_t__ Km1(DUMMY_VAR__);
        (void) Km1;  // dummy to suppress unused var warning
        stan::math::initialize(Km1, DUMMY_VAR__);
        stan::math::fill(Km1, DUMMY_VAR__);
        stan::math::assign(Km1,get_base1(p, 4, "p", 1));

        current_statement_begin__ = 52;
        local_scalar_t__ d1(DUMMY_VAR__);
        (void) d1;  // dummy to suppress unused var warning
        stan::math::initialize(d1, DUMMY_VAR__);
        stan::math::fill(d1, DUMMY_VAR__);
        stan::math::assign(d1,get_base1(p, 5, "p", 1));

        current_statement_begin__ = 53;
        local_scalar_t__ alpha2(DUMMY_VAR__);
        (void) alpha2;  // dummy to suppress unused var warning
        stan::math::initialize(alpha2, DUMMY_VAR__);
        stan::math::fill(alpha2, DUMMY_VAR__);
        stan::math::assign(alpha2,get_base1(p, 6, "p", 1));

        current_statement_begin__ = 54;
        local_scalar_t__ d2(DUMMY_VAR__);
        (void) d2;  // dummy to suppress unused var warning
        stan::math::initialize(d2, DUMMY_VAR__);
        stan::math::fill(d2, DUMMY_VAR__);
        stan::math::assign(d2,get_base1(p, 7, "p", 1));

        current_statement_begin__ = 55;
        local_scalar_t__ Kf(DUMMY_VAR__);
        (void) Kf;  // dummy to suppress unused var warning
        stan::math::initialize(Kf, DUMMY_VAR__);
        stan::math::fill(Kf, DUMMY_VAR__);
        stan::math::assign(Kf,get_base1(p, 8, "p", 1));

        current_statement_begin__ = 56;
        local_scalar_t__ sc_molec(DUMMY_VAR__);
        (void) sc_molec;  // dummy to suppress unused var warning
        stan::math::initialize(sc_molec, DUMMY_VAR__);
        stan::math::fill(sc_molec, DUMMY_VAR__);
        stan::math::assign(sc_molec,get_base1(p, 9, "p", 1));

        current_statement_begin__ = 58;
        local_scalar_t__ IPTG(DUMMY_VAR__);
        (void) IPTG;  // dummy to suppress unused var warning
        stan::math::initialize(IPTG, DUMMY_VAR__);
        stan::math::fill(IPTG, DUMMY_VAR__);
        stan::math::assign(IPTG,get_base1(x_r, 1, "x_r", 1));


        current_statement_begin__ = 63;
        stan::model::assign(alp, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    ((alpha1 + (Vm1 * (pow(IPTG, h1) / (pow(Km1, h1) + pow(IPTG, h1))))) / d1), 
                    "assigning variable alp");
        current_statement_begin__ = 64;
        stan::model::assign(alp, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                    ((alpha2 * get_base1(alp, 1, "alp", 1)) / (Kf + d2)), 
                    "assigning variable alp");
        current_statement_begin__ = 65;
        stan::model::assign(alp, 
                    stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                    ((Kf * get_base1(alp, 2, "alp", 1)) / d2), 
                    "assigning variable alp");
        current_statement_begin__ = 66;
        stan::model::assign(alp, 
                    stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list()), 
                    (sc_molec * get_base1(alp, 3, "alp", 1)), 
                    "assigning variable alp");
        current_statement_begin__ = 70;
        return stan::math::promote_scalar<fun_return_scalar_t__>(alp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct SteadyState_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& init,
                const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& p,
                const std::vector<T2__>& x_r,
                const std::vector<int>& x_i, std::ostream* pstream__) const {
        return SteadyState(init, p, x_r, x_i, pstream__);
    }
};

class PLacExample_Stan_test_model
  : public stan::model::model_base_crtp<PLacExample_Stan_test_model> {
private:
        int m;
        int stslm;
        std::vector<std::vector<int> > stsl;
        std::vector<std::vector<int> > sts;
        int obser;
        std::vector<std::vector<int> > obSta;
        std::vector<std::vector<std::vector<double> > > Means;
        std::vector<std::vector<std::vector<double> > > Erros;
        int elm;
        int tml;
        std::vector<std::vector<int> > Nsp;
        std::vector<std::vector<double> > ts;
        std::vector<std::vector<int> > tsl;
        int nindu;
        std::vector<std::vector<double> > preInd;
        std::vector<std::vector<double> > inputs;
        std::vector<std::vector<int> > evnT;
        std::vector<std::vector<double> > Y0us;
        int nParms;
        int Neq;
        std::vector<int> x_i;
        std::vector<std::vector<double> > x_r;
        std::vector<std::vector<double> > ivss;
        std::vector<std::vector<double> > pre;
public:
    PLacExample_Stan_test_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }

    PLacExample_Stan_test_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "PLacExample_Stan_test_model_namespace::PLacExample_Stan_test_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 81;
            context__.validate_dims("data initialization", "m", "int", context__.to_vec());
            m = int(0);
            vals_i__ = context__.vals_i("m");
            pos__ = 0;
            m = vals_i__[pos__++];

            current_statement_begin__ = 82;
            context__.validate_dims("data initialization", "stslm", "int", context__.to_vec());
            stslm = int(0);
            vals_i__ = context__.vals_i("stslm");
            pos__ = 0;
            stslm = vals_i__[pos__++];

            current_statement_begin__ = 83;
            validate_non_negative_index("stsl", "1", 1);
            validate_non_negative_index("stsl", "m", m);
            context__.validate_dims("data initialization", "stsl", "int", context__.to_vec(1,m));
            stsl = std::vector<std::vector<int> >(1, std::vector<int>(m, int(0)));
            vals_i__ = context__.vals_i("stsl");
            pos__ = 0;
            size_t stsl_k_0_max__ = 1;
            size_t stsl_k_1_max__ = m;
            for (size_t k_1__ = 0; k_1__ < stsl_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < stsl_k_0_max__; ++k_0__) {
                    stsl[k_0__][k_1__] = vals_i__[pos__++];
                }
            }

            current_statement_begin__ = 84;
            validate_non_negative_index("sts", "stslm", stslm);
            validate_non_negative_index("sts", "m", m);
            context__.validate_dims("data initialization", "sts", "int", context__.to_vec(stslm,m));
            sts = std::vector<std::vector<int> >(stslm, std::vector<int>(m, int(0)));
            vals_i__ = context__.vals_i("sts");
            pos__ = 0;
            size_t sts_k_0_max__ = stslm;
            size_t sts_k_1_max__ = m;
            for (size_t k_1__ = 0; k_1__ < sts_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < sts_k_0_max__; ++k_0__) {
                    sts[k_0__][k_1__] = vals_i__[pos__++];
                }
            }

            current_statement_begin__ = 85;
            context__.validate_dims("data initialization", "obser", "int", context__.to_vec());
            obser = int(0);
            vals_i__ = context__.vals_i("obser");
            pos__ = 0;
            obser = vals_i__[pos__++];

            current_statement_begin__ = 86;
            validate_non_negative_index("obSta", "1", 1);
            validate_non_negative_index("obSta", "obser", obser);
            context__.validate_dims("data initialization", "obSta", "int", context__.to_vec(1,obser));
            obSta = std::vector<std::vector<int> >(1, std::vector<int>(obser, int(0)));
            vals_i__ = context__.vals_i("obSta");
            pos__ = 0;
            size_t obSta_k_0_max__ = 1;
            size_t obSta_k_1_max__ = obser;
            for (size_t k_1__ = 0; k_1__ < obSta_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < obSta_k_0_max__; ++k_0__) {
                    obSta[k_0__][k_1__] = vals_i__[pos__++];
                }
            }

            current_statement_begin__ = 88;
            validate_non_negative_index("Means", "stslm", stslm);
            validate_non_negative_index("Means", "m", m);
            validate_non_negative_index("Means", "obser", obser);
            context__.validate_dims("data initialization", "Means", "double", context__.to_vec(stslm,m,obser));
            Means = std::vector<std::vector<std::vector<double> > >(stslm, std::vector<std::vector<double> >(m, std::vector<double>(obser, double(0))));
            vals_r__ = context__.vals_r("Means");
            pos__ = 0;
            size_t Means_k_0_max__ = stslm;
            size_t Means_k_1_max__ = m;
            size_t Means_k_2_max__ = obser;
            for (size_t k_2__ = 0; k_2__ < Means_k_2_max__; ++k_2__) {
                for (size_t k_1__ = 0; k_1__ < Means_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < Means_k_0_max__; ++k_0__) {
                        Means[k_0__][k_1__][k_2__] = vals_r__[pos__++];
                    }
                }
            }

            current_statement_begin__ = 89;
            validate_non_negative_index("Erros", "stslm", stslm);
            validate_non_negative_index("Erros", "m", m);
            validate_non_negative_index("Erros", "obser", obser);
            context__.validate_dims("data initialization", "Erros", "double", context__.to_vec(stslm,m,obser));
            Erros = std::vector<std::vector<std::vector<double> > >(stslm, std::vector<std::vector<double> >(m, std::vector<double>(obser, double(0))));
            vals_r__ = context__.vals_r("Erros");
            pos__ = 0;
            size_t Erros_k_0_max__ = stslm;
            size_t Erros_k_1_max__ = m;
            size_t Erros_k_2_max__ = obser;
            for (size_t k_2__ = 0; k_2__ < Erros_k_2_max__; ++k_2__) {
                for (size_t k_1__ = 0; k_1__ < Erros_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < Erros_k_0_max__; ++k_0__) {
                        Erros[k_0__][k_1__][k_2__] = vals_r__[pos__++];
                    }
                }
            }

            current_statement_begin__ = 92;
            context__.validate_dims("data initialization", "elm", "int", context__.to_vec());
            elm = int(0);
            vals_i__ = context__.vals_i("elm");
            pos__ = 0;
            elm = vals_i__[pos__++];

            current_statement_begin__ = 93;
            context__.validate_dims("data initialization", "tml", "int", context__.to_vec());
            tml = int(0);
            vals_i__ = context__.vals_i("tml");
            pos__ = 0;
            tml = vals_i__[pos__++];

            current_statement_begin__ = 94;
            validate_non_negative_index("Nsp", "1", 1);
            validate_non_negative_index("Nsp", "m", m);
            context__.validate_dims("data initialization", "Nsp", "int", context__.to_vec(1,m));
            Nsp = std::vector<std::vector<int> >(1, std::vector<int>(m, int(0)));
            vals_i__ = context__.vals_i("Nsp");
            pos__ = 0;
            size_t Nsp_k_0_max__ = 1;
            size_t Nsp_k_1_max__ = m;
            for (size_t k_1__ = 0; k_1__ < Nsp_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < Nsp_k_0_max__; ++k_0__) {
                    Nsp[k_0__][k_1__] = vals_i__[pos__++];
                }
            }

            current_statement_begin__ = 95;
            validate_non_negative_index("ts", "tml", tml);
            validate_non_negative_index("ts", "m", m);
            context__.validate_dims("data initialization", "ts", "double", context__.to_vec(tml,m));
            ts = std::vector<std::vector<double> >(tml, std::vector<double>(m, double(0)));
            vals_r__ = context__.vals_r("ts");
            pos__ = 0;
            size_t ts_k_0_max__ = tml;
            size_t ts_k_1_max__ = m;
            for (size_t k_1__ = 0; k_1__ < ts_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < ts_k_0_max__; ++k_0__) {
                    ts[k_0__][k_1__] = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 96;
            validate_non_negative_index("tsl", "1", 1);
            validate_non_negative_index("tsl", "m", m);
            context__.validate_dims("data initialization", "tsl", "int", context__.to_vec(1,m));
            tsl = std::vector<std::vector<int> >(1, std::vector<int>(m, int(0)));
            vals_i__ = context__.vals_i("tsl");
            pos__ = 0;
            size_t tsl_k_0_max__ = 1;
            size_t tsl_k_1_max__ = m;
            for (size_t k_1__ = 0; k_1__ < tsl_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < tsl_k_0_max__; ++k_0__) {
                    tsl[k_0__][k_1__] = vals_i__[pos__++];
                }
            }

            current_statement_begin__ = 98;
            context__.validate_dims("data initialization", "nindu", "int", context__.to_vec());
            nindu = int(0);
            vals_i__ = context__.vals_i("nindu");
            pos__ = 0;
            nindu = vals_i__[pos__++];

            current_statement_begin__ = 99;
            validate_non_negative_index("preInd", "nindu", nindu);
            validate_non_negative_index("preInd", "m", m);
            context__.validate_dims("data initialization", "preInd", "double", context__.to_vec(nindu,m));
            preInd = std::vector<std::vector<double> >(nindu, std::vector<double>(m, double(0)));
            vals_r__ = context__.vals_r("preInd");
            pos__ = 0;
            size_t preInd_k_0_max__ = nindu;
            size_t preInd_k_1_max__ = m;
            for (size_t k_1__ = 0; k_1__ < preInd_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < preInd_k_0_max__; ++k_0__) {
                    preInd[k_0__][k_1__] = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 101;
            validate_non_negative_index("inputs", "(elm * nindu)", (elm * nindu));
            validate_non_negative_index("inputs", "m", m);
            context__.validate_dims("data initialization", "inputs", "double", context__.to_vec((elm * nindu),m));
            inputs = std::vector<std::vector<double> >((elm * nindu), std::vector<double>(m, double(0)));
            vals_r__ = context__.vals_r("inputs");
            pos__ = 0;
            size_t inputs_k_0_max__ = (elm * nindu);
            size_t inputs_k_1_max__ = m;
            for (size_t k_1__ = 0; k_1__ < inputs_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < inputs_k_0_max__; ++k_0__) {
                    inputs[k_0__][k_1__] = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 103;
            validate_non_negative_index("evnT", "(elm + 1)", (elm + 1));
            validate_non_negative_index("evnT", "m", m);
            context__.validate_dims("data initialization", "evnT", "int", context__.to_vec((elm + 1),m));
            evnT = std::vector<std::vector<int> >((elm + 1), std::vector<int>(m, int(0)));
            vals_i__ = context__.vals_i("evnT");
            pos__ = 0;
            size_t evnT_k_0_max__ = (elm + 1);
            size_t evnT_k_1_max__ = m;
            for (size_t k_1__ = 0; k_1__ < evnT_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < evnT_k_0_max__; ++k_0__) {
                    evnT[k_0__][k_1__] = vals_i__[pos__++];
                }
            }

            current_statement_begin__ = 104;
            validate_non_negative_index("Y0us", "4", 4);
            validate_non_negative_index("Y0us", "m", m);
            context__.validate_dims("data initialization", "Y0us", "double", context__.to_vec(4,m));
            Y0us = std::vector<std::vector<double> >(4, std::vector<double>(m, double(0)));
            vals_r__ = context__.vals_r("Y0us");
            pos__ = 0;
            size_t Y0us_k_0_max__ = 4;
            size_t Y0us_k_1_max__ = m;
            for (size_t k_1__ = 0; k_1__ < Y0us_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < Y0us_k_0_max__; ++k_0__) {
                    Y0us[k_0__][k_1__] = vals_r__[pos__++];
                }
            }


            // initialize transformed data variables
            current_statement_begin__ = 115;
            nParms = int(0);
            stan::math::fill(nParms, std::numeric_limits<int>::min());
            stan::math::assign(nParms,9);

            current_statement_begin__ = 116;
            Neq = int(0);
            stan::math::fill(Neq, std::numeric_limits<int>::min());
            stan::math::assign(Neq,4);

            current_statement_begin__ = 117;
            validate_non_negative_index("x_i", "0", 0);
            x_i = std::vector<int>(0, int(0));
            stan::math::fill(x_i, std::numeric_limits<int>::min());

            current_statement_begin__ = 118;
            validate_non_negative_index("x_r", "(elm * nindu)", (elm * nindu));
            validate_non_negative_index("x_r", "m", m);
            x_r = std::vector<std::vector<double> >((elm * nindu), std::vector<double>(m, double(0)));
            stan::math::fill(x_r, DUMMY_VAR__);
            stan::math::assign(x_r,inputs);

            current_statement_begin__ = 119;
            validate_non_negative_index("ivss", "Neq", Neq);
            validate_non_negative_index("ivss", "m", m);
            ivss = std::vector<std::vector<double> >(Neq, std::vector<double>(m, double(0)));
            stan::math::fill(ivss, DUMMY_VAR__);
            stan::math::assign(ivss,Y0us);

            current_statement_begin__ = 120;
            validate_non_negative_index("pre", "nindu", nindu);
            validate_non_negative_index("pre", "m", m);
            pre = std::vector<std::vector<double> >(nindu, std::vector<double>(m, double(0)));
            stan::math::fill(pre, DUMMY_VAR__);

            // execute transformed data statements
            current_statement_begin__ = 122;
            for (int i = 1; i <= m; ++i) {

                current_statement_begin__ = 123;
                for (int k = 1; k <= nindu; ++k) {

                    current_statement_begin__ = 124;
                    stan::model::assign(pre, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                get_base1(get_base1(preInd, k, "preInd", 1), i, "preInd", 2), 
                                "assigning variable pre");
                }
            }

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 133;
            num_params_r__ += 1;
            current_statement_begin__ = 134;
            num_params_r__ += 1;
            current_statement_begin__ = 135;
            num_params_r__ += 1;
            current_statement_begin__ = 136;
            num_params_r__ += 1;
            current_statement_begin__ = 137;
            num_params_r__ += 1;
            current_statement_begin__ = 138;
            num_params_r__ += 1;
            current_statement_begin__ = 139;
            num_params_r__ += 1;
            current_statement_begin__ = 140;
            num_params_r__ += 1;
            current_statement_begin__ = 141;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~PLacExample_Stan_test_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 133;
        if (!(context__.contains_r("alpha1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "alpha1", "double", context__.to_vec());
        double alpha1(0);
        alpha1 = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(-(2), 2, alpha1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha1: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 134;
        if (!(context__.contains_r("Vm1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable Vm1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("Vm1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "Vm1", "double", context__.to_vec());
        double Vm1(0);
        Vm1 = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(-(2), 2, Vm1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable Vm1: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 135;
        if (!(context__.contains_r("h1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "h1", "double", context__.to_vec());
        double h1(0);
        h1 = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(-(2), 2, h1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h1: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 136;
        if (!(context__.contains_r("Km1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable Km1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("Km1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "Km1", "double", context__.to_vec());
        double Km1(0);
        Km1 = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(-(2), 2, Km1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable Km1: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 137;
        if (!(context__.contains_r("d1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable d1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("d1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "d1", "double", context__.to_vec());
        double d1(0);
        d1 = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(-(2), 2, d1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable d1: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 138;
        if (!(context__.contains_r("alpha2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "alpha2", "double", context__.to_vec());
        double alpha2(0);
        alpha2 = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(-(2), 2, alpha2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha2: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 139;
        if (!(context__.contains_r("d2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable d2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("d2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "d2", "double", context__.to_vec());
        double d2(0);
        d2 = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(-(2), 2, d2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable d2: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 140;
        if (!(context__.contains_r("Kf")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable Kf missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("Kf");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "Kf", "double", context__.to_vec());
        double Kf(0);
        Kf = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(-(2), 2, Kf);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable Kf: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 141;
        if (!(context__.contains_r("sc_molec")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sc_molec missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sc_molec");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sc_molec", "double", context__.to_vec());
        double sc_molec(0);
        sc_molec = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(-(2), 2, sc_molec);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sc_molec: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 133;
            local_scalar_t__ alpha1;
            (void) alpha1;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha1 = in__.scalar_lub_constrain(-(2), 2, lp__);
            else
                alpha1 = in__.scalar_lub_constrain(-(2), 2);

            current_statement_begin__ = 134;
            local_scalar_t__ Vm1;
            (void) Vm1;  // dummy to suppress unused var warning
            if (jacobian__)
                Vm1 = in__.scalar_lub_constrain(-(2), 2, lp__);
            else
                Vm1 = in__.scalar_lub_constrain(-(2), 2);

            current_statement_begin__ = 135;
            local_scalar_t__ h1;
            (void) h1;  // dummy to suppress unused var warning
            if (jacobian__)
                h1 = in__.scalar_lub_constrain(-(2), 2, lp__);
            else
                h1 = in__.scalar_lub_constrain(-(2), 2);

            current_statement_begin__ = 136;
            local_scalar_t__ Km1;
            (void) Km1;  // dummy to suppress unused var warning
            if (jacobian__)
                Km1 = in__.scalar_lub_constrain(-(2), 2, lp__);
            else
                Km1 = in__.scalar_lub_constrain(-(2), 2);

            current_statement_begin__ = 137;
            local_scalar_t__ d1;
            (void) d1;  // dummy to suppress unused var warning
            if (jacobian__)
                d1 = in__.scalar_lub_constrain(-(2), 2, lp__);
            else
                d1 = in__.scalar_lub_constrain(-(2), 2);

            current_statement_begin__ = 138;
            local_scalar_t__ alpha2;
            (void) alpha2;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha2 = in__.scalar_lub_constrain(-(2), 2, lp__);
            else
                alpha2 = in__.scalar_lub_constrain(-(2), 2);

            current_statement_begin__ = 139;
            local_scalar_t__ d2;
            (void) d2;  // dummy to suppress unused var warning
            if (jacobian__)
                d2 = in__.scalar_lub_constrain(-(2), 2, lp__);
            else
                d2 = in__.scalar_lub_constrain(-(2), 2);

            current_statement_begin__ = 140;
            local_scalar_t__ Kf;
            (void) Kf;  // dummy to suppress unused var warning
            if (jacobian__)
                Kf = in__.scalar_lub_constrain(-(2), 2, lp__);
            else
                Kf = in__.scalar_lub_constrain(-(2), 2);

            current_statement_begin__ = 141;
            local_scalar_t__ sc_molec;
            (void) sc_molec;  // dummy to suppress unused var warning
            if (jacobian__)
                sc_molec = in__.scalar_lub_constrain(-(2), 2, lp__);
            else
                sc_molec = in__.scalar_lub_constrain(-(2), 2);

            // transformed parameters
            current_statement_begin__ = 150;
            validate_non_negative_index("theta", "nParms", nParms);
            std::vector<local_scalar_t__> theta(nParms, local_scalar_t__(0));
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);

            // transformed parameters block statements
            current_statement_begin__ = 151;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        ((alpha1 * 0.1237403) + 0.2475194), 
                        "assigning variable theta");
            current_statement_begin__ = 152;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                        ((Vm1 * 0.11405) + 0.2669), 
                        "assigning variable theta");
            current_statement_begin__ = 153;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                        ((h1 * 1.1) + 2.7), 
                        "assigning variable theta");
            current_statement_begin__ = 154;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list()), 
                        ((Km1 * 2.0) + 6.0), 
                        "assigning variable theta");
            current_statement_begin__ = 155;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list()), 
                        ((d1 * 0.055575) + 0.11885000000000001), 
                        "assigning variable theta");
            current_statement_begin__ = 156;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_uni(6), stan::model::nil_index_list()), 
                        ((alpha2 * 1.6408500000000001) + 3.525), 
                        "assigning variable theta");
            current_statement_begin__ = 157;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_uni(7), stan::model::nil_index_list()), 
                        ((d2 * 0.06121005) + 0.1224799), 
                        "assigning variable theta");
            current_statement_begin__ = 158;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_uni(8), stan::model::nil_index_list()), 
                        ((Kf * 0.002425) + 0.01685), 
                        "assigning variable theta");
            current_statement_begin__ = 159;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_uni(9), stan::model::nil_index_list()), 
                        ((sc_molec * 2.49975) + 5.0005), 
                        "assigning variable theta");

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 150;
            size_t theta_k_0_max__ = nParms;
            for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(theta[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: theta" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable theta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }

            // model body
            {
            current_statement_begin__ = 169;
            int i(0);
            (void) i;  // dummy to suppress unused var warning
            stan::math::fill(i, std::numeric_limits<int>::min());

            current_statement_begin__ = 170;
            validate_non_negative_index("ing", "Neq", Neq);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> ing(Neq);
            stan::math::initialize(ing, DUMMY_VAR__);
            stan::math::fill(ing, DUMMY_VAR__);

            current_statement_begin__ = 172;
            validate_non_negative_index("Y0", "Neq", Neq);
            validate_non_negative_index("Y0", "m", m);
            std::vector<std::vector<local_scalar_t__  >  > Y0(Neq, std::vector<local_scalar_t__>(m, local_scalar_t__(DUMMY_VAR__)));
            stan::math::initialize(Y0, DUMMY_VAR__);
            stan::math::fill(Y0, DUMMY_VAR__);

            current_statement_begin__ = 173;
            validate_non_negative_index("yhat", "stslm", stslm);
            validate_non_negative_index("yhat", "m", m);
            validate_non_negative_index("yhat", "obser", obser);
            std::vector<std::vector<std::vector<local_scalar_t__  >  >  > yhat(stslm, std::vector<std::vector<local_scalar_t__> >(m, std::vector<local_scalar_t__>(obser, local_scalar_t__(DUMMY_VAR__))));
            stan::math::initialize(yhat, DUMMY_VAR__);
            stan::math::fill(yhat, DUMMY_VAR__);


            current_statement_begin__ = 176;
            lp_accum__.add(normal_log<propto__>(alpha1, 0, 1));
            current_statement_begin__ = 177;
            lp_accum__.add(normal_log<propto__>(Vm1, 0, 1));
            current_statement_begin__ = 178;
            lp_accum__.add(normal_log<propto__>(h1, 0, 1));
            current_statement_begin__ = 179;
            lp_accum__.add(normal_log<propto__>(Km1, 0, 1));
            current_statement_begin__ = 180;
            lp_accum__.add(normal_log<propto__>(d1, 0, 1));
            current_statement_begin__ = 181;
            lp_accum__.add(normal_log<propto__>(alpha2, 0, 1));
            current_statement_begin__ = 182;
            lp_accum__.add(normal_log<propto__>(d2, 0, 1));
            current_statement_begin__ = 183;
            lp_accum__.add(normal_log<propto__>(Kf, 0, 1));
            current_statement_begin__ = 184;
            lp_accum__.add(normal_log<propto__>(sc_molec, 0, 1));
            current_statement_begin__ = 188;
            for (int j = 1; j <= m; ++j) {
                {
                current_statement_begin__ = 190;
                validate_non_negative_index("ivst", "Neq", Neq);
                std::vector<local_scalar_t__  > ivst(Neq, local_scalar_t__(DUMMY_VAR__));
                stan::math::initialize(ivst, DUMMY_VAR__);
                stan::math::fill(ivst, DUMMY_VAR__);

                current_statement_begin__ = 191;
                validate_non_negative_index("y_hat", "get_base1(get_base1(tsl, 1, \"tsl\", 1), j, \"tsl\", 2)", get_base1(get_base1(tsl, 1, "tsl", 1), j, "tsl", 2));
                validate_non_negative_index("y_hat", "Neq", Neq);
                std::vector<std::vector<local_scalar_t__  >  > y_hat(get_base1(get_base1(tsl, 1, "tsl", 1), j, "tsl", 2), std::vector<local_scalar_t__>(Neq, local_scalar_t__(DUMMY_VAR__)));
                stan::math::initialize(y_hat, DUMMY_VAR__);
                stan::math::fill(y_hat, DUMMY_VAR__);


                current_statement_begin__ = 195;
                stan::math::assign(ing, SteadyState(to_vector(stan::model::rvalue(ivss, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), "ivss")), to_vector(theta), stan::model::rvalue(pre, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), "pre"), x_i, pstream__));
                current_statement_begin__ = 196;
                for (int g = 1; g <= Neq; ++g) {

                    current_statement_begin__ = 197;
                    stan::model::assign(Y0, 
                                stan::model::cons_list(stan::model::index_uni(g), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                get_base1(ing, g, "ing", 1), 
                                "assigning variable Y0");
                }
                current_statement_begin__ = 201;
                stan::math::assign(i, 1);
                current_statement_begin__ = 205;
                for (int q = 1; q <= (get_base1(get_base1(Nsp, 1, "Nsp", 1), j, "Nsp", 2) - 1); ++q) {
                    {
                    current_statement_begin__ = 206;
                    int itp(0);
                    (void) itp;  // dummy to suppress unused var warning
                    stan::math::fill(itp, std::numeric_limits<int>::min());
                    stan::math::assign(itp,get_base1(get_base1(evnT, q, "evnT", 1), j, "evnT", 2));

                    current_statement_begin__ = 207;
                    int lts(0);
                    (void) lts;  // dummy to suppress unused var warning
                    stan::math::fill(lts, std::numeric_limits<int>::min());
                    stan::math::assign(lts,num_elements(stan::model::rvalue(ts, stan::model::cons_list(stan::model::index_min_max((get_base1(get_base1(evnT, q, "evnT", 1), j, "evnT", 2) + 1), (get_base1(get_base1(evnT, (q + 1), "evnT", 1), j, "evnT", 2) + 1)), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), "ts")));

                    current_statement_begin__ = 208;
                    validate_non_negative_index("part1", "lts", lts);
                    validate_non_negative_index("part1", "Neq", Neq);
                    std::vector<std::vector<local_scalar_t__  >  > part1(lts, std::vector<local_scalar_t__>(Neq, local_scalar_t__(DUMMY_VAR__)));
                    stan::math::initialize(part1, DUMMY_VAR__);
                    stan::math::fill(part1, DUMMY_VAR__);


                    current_statement_begin__ = 211;
                    if (as_bool(logical_eq(q, 1))) {

                        current_statement_begin__ = 212;
                        stan::math::assign(ivst, stan::model::rvalue(Y0, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), "Y0"));
                        current_statement_begin__ = 213;
                        stan::math::assign(part1, integrate_ode_bdf(PLacExample_ODEs_functor__(), ivst, itp, stan::model::rvalue(ts, stan::model::cons_list(stan::model::index_min_max((get_base1(get_base1(evnT, q, "evnT", 1), j, "evnT", 2) + 1), (get_base1(get_base1(evnT, (q + 1), "evnT", 1), j, "evnT", 2) + 1)), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), "ts"), theta, to_array_1d(stan::model::rvalue(inputs, stan::model::cons_list(stan::model::index_min_max(i, (i + (nindu - 1))), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), "inputs")), x_i, pstream__, 1.0e-9, 1.0e-9, 1e7));
                    } else {

                        current_statement_begin__ = 216;
                        stan::math::assign(part1, integrate_ode_bdf(PLacExample_ODEs_functor__(), ivst, (itp - 1e-7), stan::model::rvalue(ts, stan::model::cons_list(stan::model::index_min_max((get_base1(get_base1(evnT, q, "evnT", 1), j, "evnT", 2) + 1), (get_base1(get_base1(evnT, (q + 1), "evnT", 1), j, "evnT", 2) + 1)), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), "ts"), theta, to_array_1d(stan::model::rvalue(inputs, stan::model::cons_list(stan::model::index_min_max(i, (i + (nindu - 1))), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), "inputs")), x_i, pstream__, 1.0e-9, 1.0e-9, 1e7));
                    }
                    current_statement_begin__ = 220;
                    stan::math::assign(ivst, get_base1(part1, lts, "part1", 1));
                    current_statement_begin__ = 222;
                    stan::math::assign(i, (i + nindu));
                    current_statement_begin__ = 225;
                    for (int y = (itp + 1); y <= (itp + lts); ++y) {

                        current_statement_begin__ = 226;
                        stan::model::assign(y_hat, 
                                    stan::model::cons_list(stan::model::index_uni(y), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                    stan::model::rvalue(part1, stan::model::cons_list(stan::model::index_uni((y - itp)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "part1"), 
                                    "assigning variable y_hat");
                    }
                    }
                }
                current_statement_begin__ = 232;
                for (int t = 1; t <= get_base1(get_base1(stsl, 1, "stsl", 1), j, "stsl", 2); ++t) {

                    current_statement_begin__ = 233;
                    stan::model::assign(yhat, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                                (3 * get_base1(get_base1(y_hat, (get_base1(get_base1(sts, t, "sts", 1), j, "sts", 2) + 1), "y_hat", 1), 4, "y_hat", 2)), 
                                "assigning variable yhat");
                    current_statement_begin__ = 234;
                    lp_accum__.add(normal_log<propto__>(get_base1(get_base1(get_base1(Means, t, "Means", 1), j, "Means", 2), 1, "Means", 3), get_base1(get_base1(get_base1(yhat, t, "yhat", 1), j, "yhat", 2), 1, "yhat", 3), get_base1(get_base1(get_base1(Erros, t, "Erros", 1), j, "Erros", 2), 1, "Erros", 3)));
                }
                }
            }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("alpha1");
        names__.push_back("Vm1");
        names__.push_back("h1");
        names__.push_back("Km1");
        names__.push_back("d1");
        names__.push_back("alpha2");
        names__.push_back("d2");
        names__.push_back("Kf");
        names__.push_back("sc_molec");
        names__.push_back("theta");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nParms);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "PLacExample_Stan_test_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        double alpha1 = in__.scalar_lub_constrain(-(2), 2);
        vars__.push_back(alpha1);

        double Vm1 = in__.scalar_lub_constrain(-(2), 2);
        vars__.push_back(Vm1);

        double h1 = in__.scalar_lub_constrain(-(2), 2);
        vars__.push_back(h1);

        double Km1 = in__.scalar_lub_constrain(-(2), 2);
        vars__.push_back(Km1);

        double d1 = in__.scalar_lub_constrain(-(2), 2);
        vars__.push_back(d1);

        double alpha2 = in__.scalar_lub_constrain(-(2), 2);
        vars__.push_back(alpha2);

        double d2 = in__.scalar_lub_constrain(-(2), 2);
        vars__.push_back(d2);

        double Kf = in__.scalar_lub_constrain(-(2), 2);
        vars__.push_back(Kf);

        double sc_molec = in__.scalar_lub_constrain(-(2), 2);
        vars__.push_back(sc_molec);

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 150;
            validate_non_negative_index("theta", "nParms", nParms);
            std::vector<double> theta(nParms, double(0));
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);

            // do transformed parameters statements
            current_statement_begin__ = 151;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        ((alpha1 * 0.1237403) + 0.2475194), 
                        "assigning variable theta");
            current_statement_begin__ = 152;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                        ((Vm1 * 0.11405) + 0.2669), 
                        "assigning variable theta");
            current_statement_begin__ = 153;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                        ((h1 * 1.1) + 2.7), 
                        "assigning variable theta");
            current_statement_begin__ = 154;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list()), 
                        ((Km1 * 2.0) + 6.0), 
                        "assigning variable theta");
            current_statement_begin__ = 155;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list()), 
                        ((d1 * 0.055575) + 0.11885000000000001), 
                        "assigning variable theta");
            current_statement_begin__ = 156;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_uni(6), stan::model::nil_index_list()), 
                        ((alpha2 * 1.6408500000000001) + 3.525), 
                        "assigning variable theta");
            current_statement_begin__ = 157;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_uni(7), stan::model::nil_index_list()), 
                        ((d2 * 0.06121005) + 0.1224799), 
                        "assigning variable theta");
            current_statement_begin__ = 158;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_uni(8), stan::model::nil_index_list()), 
                        ((Kf * 0.002425) + 0.01685), 
                        "assigning variable theta");
            current_statement_begin__ = 159;
            stan::model::assign(theta, 
                        stan::model::cons_list(stan::model::index_uni(9), stan::model::nil_index_list()), 
                        ((sc_molec * 2.49975) + 5.0005), 
                        "assigning variable theta");

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // write transformed parameters
            if (include_tparams__) {
                size_t theta_k_0_max__ = nParms;
                for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
                    vars__.push_back(theta[k_0__]);
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    std::string model_name() const {
        return "PLacExample_Stan_test_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Vm1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Km1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "d1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "d2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Kf";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sc_molec";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t theta_k_0_max__ = nParms;
            for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Vm1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Km1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "d1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "d2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Kf";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sc_molec";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t theta_k_0_max__ = nParms;
            for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
    }

}; // model

}  // namespace

typedef PLacExample_Stan_test_model_namespace::PLacExample_Stan_test_model stan_model;

stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

